// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pamukkale_university/ent/departments"
	"pamukkale_university/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentsUpdate is the builder for updating Departments entities.
type DepartmentsUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentsMutation
}

// Where appends a list predicates to the DepartmentsUpdate builder.
func (du *DepartmentsUpdate) Where(ps ...predicate.Departments) *DepartmentsUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCode sets the "code" field.
func (du *DepartmentsUpdate) SetCode(s string) *DepartmentsUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetName sets the "name" field.
func (du *DepartmentsUpdate) SetName(s string) *DepartmentsUpdate {
	du.mutation.SetName(s)
	return du
}

// SetDegreeType sets the "degree_type" field.
func (du *DepartmentsUpdate) SetDegreeType(b bool) *DepartmentsUpdate {
	du.mutation.SetDegreeType(b)
	return du
}

// SetNillableDegreeType sets the "degree_type" field if the given value is not nil.
func (du *DepartmentsUpdate) SetNillableDegreeType(b *bool) *DepartmentsUpdate {
	if b != nil {
		du.SetDegreeType(*b)
	}
	return du
}

// SetQuota sets the "quota" field.
func (du *DepartmentsUpdate) SetQuota(i int) *DepartmentsUpdate {
	du.mutation.ResetQuota()
	du.mutation.SetQuota(i)
	return du
}

// AddQuota adds i to the "quota" field.
func (du *DepartmentsUpdate) AddQuota(i int) *DepartmentsUpdate {
	du.mutation.AddQuota(i)
	return du
}

// Mutation returns the DepartmentsMutation object of the builder.
func (du *DepartmentsUpdate) Mutation() *DepartmentsMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DepartmentsMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentsUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentsUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentsUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DepartmentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(departments.Table, departments.Columns, sqlgraph.NewFieldSpec(departments.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(departments.FieldCode, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(departments.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.DegreeType(); ok {
		_spec.SetField(departments.FieldDegreeType, field.TypeBool, value)
	}
	if value, ok := du.mutation.Quota(); ok {
		_spec.SetField(departments.FieldQuota, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedQuota(); ok {
		_spec.AddField(departments.FieldQuota, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentsUpdateOne is the builder for updating a single Departments entity.
type DepartmentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentsMutation
}

// SetCode sets the "code" field.
func (duo *DepartmentsUpdateOne) SetCode(s string) *DepartmentsUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetName sets the "name" field.
func (duo *DepartmentsUpdateOne) SetName(s string) *DepartmentsUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetDegreeType sets the "degree_type" field.
func (duo *DepartmentsUpdateOne) SetDegreeType(b bool) *DepartmentsUpdateOne {
	duo.mutation.SetDegreeType(b)
	return duo
}

// SetNillableDegreeType sets the "degree_type" field if the given value is not nil.
func (duo *DepartmentsUpdateOne) SetNillableDegreeType(b *bool) *DepartmentsUpdateOne {
	if b != nil {
		duo.SetDegreeType(*b)
	}
	return duo
}

// SetQuota sets the "quota" field.
func (duo *DepartmentsUpdateOne) SetQuota(i int) *DepartmentsUpdateOne {
	duo.mutation.ResetQuota()
	duo.mutation.SetQuota(i)
	return duo
}

// AddQuota adds i to the "quota" field.
func (duo *DepartmentsUpdateOne) AddQuota(i int) *DepartmentsUpdateOne {
	duo.mutation.AddQuota(i)
	return duo
}

// Mutation returns the DepartmentsMutation object of the builder.
func (duo *DepartmentsUpdateOne) Mutation() *DepartmentsMutation {
	return duo.mutation
}

// Where appends a list predicates to the DepartmentsUpdate builder.
func (duo *DepartmentsUpdateOne) Where(ps ...predicate.Departments) *DepartmentsUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentsUpdateOne) Select(field string, fields ...string) *DepartmentsUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Departments entity.
func (duo *DepartmentsUpdateOne) Save(ctx context.Context) (*Departments, error) {
	return withHooks[*Departments, DepartmentsMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentsUpdateOne) SaveX(ctx context.Context) *Departments {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentsUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentsUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DepartmentsUpdateOne) sqlSave(ctx context.Context) (_node *Departments, err error) {
	_spec := sqlgraph.NewUpdateSpec(departments.Table, departments.Columns, sqlgraph.NewFieldSpec(departments.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Departments.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, departments.FieldID)
		for _, f := range fields {
			if !departments.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != departments.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(departments.FieldCode, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(departments.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.DegreeType(); ok {
		_spec.SetField(departments.FieldDegreeType, field.TypeBool, value)
	}
	if value, ok := duo.mutation.Quota(); ok {
		_spec.SetField(departments.FieldQuota, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedQuota(); ok {
		_spec.AddField(departments.FieldQuota, field.TypeInt, value)
	}
	_node = &Departments{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{departments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
