// Code generated by ent, DO NOT EDIT.

package departments

import (
	"pamukkale_university/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Departments {
	return predicate.Departments(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldName, v))
}

// DegreeType applies equality check predicate on the "degree_type" field. It's identical to DegreeTypeEQ.
func DegreeType(v bool) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldDegreeType, v))
}

// Quota applies equality check predicate on the "quota" field. It's identical to QuotaEQ.
func Quota(v int) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldQuota, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Departments {
	return predicate.Departments(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Departments {
	return predicate.Departments(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Departments {
	return predicate.Departments(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Departments {
	return predicate.Departments(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Departments {
	return predicate.Departments(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Departments {
	return predicate.Departments(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Departments {
	return predicate.Departments(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Departments {
	return predicate.Departments(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Departments {
	return predicate.Departments(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Departments {
	return predicate.Departments(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Departments {
	return predicate.Departments(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Departments {
	return predicate.Departments(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Departments {
	return predicate.Departments(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Departments {
	return predicate.Departments(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Departments {
	return predicate.Departments(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Departments {
	return predicate.Departments(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Departments {
	return predicate.Departments(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Departments {
	return predicate.Departments(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Departments {
	return predicate.Departments(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Departments {
	return predicate.Departments(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Departments {
	return predicate.Departments(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Departments {
	return predicate.Departments(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Departments {
	return predicate.Departments(sql.FieldContainsFold(FieldName, v))
}

// DegreeTypeEQ applies the EQ predicate on the "degree_type" field.
func DegreeTypeEQ(v bool) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldDegreeType, v))
}

// DegreeTypeNEQ applies the NEQ predicate on the "degree_type" field.
func DegreeTypeNEQ(v bool) predicate.Departments {
	return predicate.Departments(sql.FieldNEQ(FieldDegreeType, v))
}

// QuotaEQ applies the EQ predicate on the "quota" field.
func QuotaEQ(v int) predicate.Departments {
	return predicate.Departments(sql.FieldEQ(FieldQuota, v))
}

// QuotaNEQ applies the NEQ predicate on the "quota" field.
func QuotaNEQ(v int) predicate.Departments {
	return predicate.Departments(sql.FieldNEQ(FieldQuota, v))
}

// QuotaIn applies the In predicate on the "quota" field.
func QuotaIn(vs ...int) predicate.Departments {
	return predicate.Departments(sql.FieldIn(FieldQuota, vs...))
}

// QuotaNotIn applies the NotIn predicate on the "quota" field.
func QuotaNotIn(vs ...int) predicate.Departments {
	return predicate.Departments(sql.FieldNotIn(FieldQuota, vs...))
}

// QuotaGT applies the GT predicate on the "quota" field.
func QuotaGT(v int) predicate.Departments {
	return predicate.Departments(sql.FieldGT(FieldQuota, v))
}

// QuotaGTE applies the GTE predicate on the "quota" field.
func QuotaGTE(v int) predicate.Departments {
	return predicate.Departments(sql.FieldGTE(FieldQuota, v))
}

// QuotaLT applies the LT predicate on the "quota" field.
func QuotaLT(v int) predicate.Departments {
	return predicate.Departments(sql.FieldLT(FieldQuota, v))
}

// QuotaLTE applies the LTE predicate on the "quota" field.
func QuotaLTE(v int) predicate.Departments {
	return predicate.Departments(sql.FieldLTE(FieldQuota, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Departments) predicate.Departments {
	return predicate.Departments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Departments) predicate.Departments {
	return predicate.Departments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Departments) predicate.Departments {
	return predicate.Departments(func(s *sql.Selector) {
		p(s.Not())
	})
}
